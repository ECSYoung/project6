{"version":3,"sources":["firebase.js","Components/Helmet.js","Components/Preloader.js","Components/Header.js","Components/Search.js","Components/ProductText.js","Components/ProductImage.js","Components/ReviewSubmitButton.js","Components/StarRating.js","Components/ReviewForm.js","Components/ReviewReadPanel.js","Components/ReviewParent.js","Components/ProductInfo.js","Components/ResultItem.js","Components/Results.js","Components/FilterResults.js","Components/Main.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","auth","GoogleAuthProvider","Application","className","Helmet","name","content","property","React","Component","Preloader","Header","handleClick","setState","isUp","state","this","props","user","displayName","email","onClick","logout","icon","faChevronCircleDown","faListAlt","tabIndex","aria-label","login","Search","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","suggestionsOptions","filter","suggestion","slice","getSuggestionValue","renderSuggestion","onChange","event","newValue","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onSuggestionSelected","e","suggestionValue","suggestionIndex","sectionIndex","method","preventDefault","handleSubmit","handleSearchInput","Swal","fire","title","text","veganProducts","forEach","dataObject","brand","push","product_type","suggestionsUnique","Set","inputProps","placeholder","id","onSubmit","htmlFor","focusInputOnSuggestionClick","ProductText","product","price","parseInt","toFixed","rating","ReviewLink","match","useRouteMatch","path","to","exact","activateOnlyWhenExact","setActiveID","label","ProductImage","src","api_featured_image","alt","ReviewSubmitButton","ratingProps","GoToReviewPanel","readReview","GoToReviews","currentRating","database","ref","dbRef","on","response","dataFromDb","val","newState","key","reviewInfo","review","type","userRating","StarRating","hoverHandler","ev","stars","target","parentElement","getElementsByClassName","hoverValue","dataset","Array","from","star","style","color","setRating","refs","starClickHandler","console","log","data-rating","onMouseOut","numberOfStars","keys","map","n","data-value","onMouseOver","ReviewForm","action","handleFormSubmit","handleChange","userNameProp","rows","cols","handleChangeTxtArea","userReviewProp","radioChange","ReviewReadPanel","uniqueKey","userName","userReview","userRepurchase","ReviewParent","changeEvent","activeID","uID","userID","setRead","isWriting","toggleReadReview","setWrite","reviews","userImg","isReviewing","uid","userInputProp","userInput","userStarProp","onStarClick","reviewList","ProductInfo","maxLength","description","substring","href","product_link","product_colors","colour_name","background","hex_value","render","ResultItem","Results","filteredResults","FilterResults","filterSelection","set","refineArray","checked","add","delete","updateRefinedItemsMain","updaterefinedItems","Main","input","searchInput","isSearched","filterResults","filteredArray","originalResults","newResults","refinedCategory","filterRefinedArray","eachProduct","tag_list","eachTag","choice","includes","Footer","rel","App","signInWithPopup","then","result","signOut","veganArray","isLoading","axios","url","responseType","params","product_tags","data","onAuthStateChanged","currentUser","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b88e3ee.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from \"firebase\";\r\n\r\n// Initialize Firebase\r\n// USE YOUR CONFIG OBJECT\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCd2gqxrwZeTSOKYXliPvRpQK52kk_TVwc\",\r\n    authDomain: \"ethicalmakeup-9f173.firebaseapp.com\",\r\n    databaseURL: \"https://ethicalmakeup-9f173.firebaseio.com\",\r\n    projectId: \"ethicalmakeup-9f173\",\r\n    storageBucket: \"ethicalmakeup-9f173.appspot.com\",\r\n    messagingSenderId: \"446242384772\",\r\n    appId: \"1:446242384772:web:26fb2fdb2b7bc6716bcbd1\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// this exports the CONFIGURED version of firebase\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();\r\nexport default firebase;","// a couple of functions from the React library\r\nimport React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass Application extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className=\"application\">\r\n            <Helmet>\r\n            <title>• Ethical Makeup •</title>\r\n            {/* search metadata */}\r\n            <meta name=\"description\" content=\"Search for vegan makeup products\" />\r\n            <meta name=\"robots\" content=\"index, nofollow\" />\r\n            <meta name=\"author\" content=\"Sui Young, Naveen Malhotra, Jobert Manosca, Stephanie Kerr\" />\r\n            {/* twitter metadata */}\r\n            <meta name=\"twitter:card\" content=\"summary\" />\r\n            <meta name=\"twitter:title\" content=\"Ethical Makeup\" />\r\n            <meta name=\"twitter:description\"\r\n                content=\"Search for vegan makeup products\" />\r\n            {/* <meta name=\"twitter:image\" content=\"\" /> */}\r\n            {/* linkedin and facebook metadata */}\r\n            <meta property=\"og:url\" content=\"https://ethicalMakeupC25.github.io/project6/\" />\r\n            <meta property=\"og:type\" content=\"website\" />\r\n            <meta property=\"og:title\" content=\"Ethical Makeup\" />\r\n            <meta property=\"og:description\"\r\n                content=\"Search for vegan makeup products\" />\r\n            {/* <meta property=\"og:image\" content=\"\" /> */}\r\n            </Helmet>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Application;\r\n","import React from 'react';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\">\r\n            <p>loading</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React, { Fragment, Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faListAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Header extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isUp: false,\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({\r\n            isUp: !this.state.isUp\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <nav className=\"wrapper\">\r\n                    <h1>Ethical Makeup</h1>\r\n                    {\r\n                        //null is falsy .: if props.user is null, show login\r\n                        //if props.user is truthy, show additional features and logout\r\n                        this.props.user\r\n                        ?\r\n                            <Fragment>\r\n                                <div className=\"userDetails\">\r\n                                    {/* if no displayname exists, show email */}\r\n                                    <p>Hi {this.props.user.displayName || this.props.user.email}!</p>\r\n                                    <div className=\"buttonContainer\">\r\n                                        <button>wishlist</button>\r\n                                        <button>your reviews</button>\r\n                                        <button onClick={this.props.logout}>log out</button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mobileUserDetails\">\r\n                                    <div className=\"wrapper\">\r\n                                        <div className=\"display\">\r\n                                            {/* if no displayname exists, show email */}\r\n                                            <p>Hi {this.props.user.displayName || this.props.user.email}!</p>\r\n                                            <FontAwesomeIcon icon={this.state.isUp ? faChevronCircleDown : faListAlt} className=\"toggleMenu\" tabIndex=\"0\" aria-label=\"open and close user menu\" onClick={this.handleClick} />\r\n                                        </div>\r\n                                        {\r\n                                            this.state.isUp\r\n                                                ?\r\n                                                <div className=\"buttonContainer\">\r\n                                                    <button>wishlist</button>\r\n                                                    <button>your reviews</button>\r\n                                                    <button onClick={this.props.logout}>log out</button>\r\n                                                </div>\r\n                                                :\r\n                                                null\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </Fragment>\r\n                        :\r\n                            <button \r\n                                onClick={this.props.login}\r\n                                className=\"logInButton\">log in to save to wishlist</button>\r\n                    }\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport Swal from 'sweetalert2';\r\n// all functions below related to suggestions has been adapted from https://www.npmjs.com/package/react-autosuggest and https://codepen.io/moroshko/pen/PZWbzK\r\n\r\nclass Search extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            value: '',\r\n            suggestions: [],\r\n            suggestionsOptions: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // pull brands, product types and names for autosuggestions by iterating over veganProducts and pushing brand, product type and name values to an empty array\r\n        const suggestions = [];\r\n        this.props.veganProducts.forEach((dataObject) => {\r\n            //null and undefined is falsy, .: don't push these values\r\n            if (dataObject.brand) {\r\n                suggestions.push(dataObject.brand)\r\n            }\r\n            if (dataObject.product_type) {\r\n                suggestions.push(dataObject.product_type)\r\n                // NOTE TO SELF: NEED TO WASH _ TO SPACES\r\n            }\r\n            if (dataObject.name) {\r\n                suggestions.push(dataObject.name)\r\n            }\r\n        })\r\n        // Set will filter out duplicates from the array\r\n        const suggestionsUnique = [...new Set(suggestions)];\r\n\r\n        // update state with processed suggestions from veganProducts\r\n        this.setState({\r\n            suggestionsOptions: suggestionsUnique\r\n        })\r\n    }\r\n\r\n    //this function teaches autosuggest how to calculate suggestions for any given input value\r\n    getSuggestions = (value) => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n\r\n        return inputLength === 0 ? [] : this.state.suggestionsOptions.filter(suggestion => suggestion.toLowerCase().slice(0, inputLength) === inputValue);\r\n    }\r\n\r\n    //when suggestion is clicked, autosuggest needs to populate input based on clicked suggestion\r\n    //this function teaches autosuggest how to calculate the input value for every given suggestion\r\n    getSuggestionValue = suggestion => suggestion;\r\n\r\n    //render the suggestion\r\n    renderSuggestion = suggestion => (<span>{suggestion}</span>);\r\n\r\n    onChange = (event, { newValue }) => {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    };\r\n\r\n    //store suggestions to state\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n            suggestions: this.getSuggestions(value)\r\n        });\r\n    };\r\n\r\n    //clear state\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    //when searchbar suggestion is clicked on instead of submitted via enter\r\n    onSuggestionSelected = (e, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            value: suggestionValue\r\n        }, () => {this.handleSubmit(e)})\r\n    }\r\n\r\n    //locally resolve submit and then pass to parent component\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.value) {\r\n            this.props.handleSearchInput(this.state.value);\r\n            this.setState({\r\n                value: ''\r\n            })\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'You may want to search for something first!'\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { value, suggestions } = this.state;\r\n\r\n        //set up input attributes here for Autosuggest\r\n        const inputProps = {\r\n            placeholder: 'product type, name or brand',\r\n            value,\r\n            onChange: this.onChange,\r\n            id: 'productSearch'\r\n        }\r\n\r\n        return (\r\n            <section className=\"searchBar\">\r\n                <form onSubmit={(e) => {this.handleSubmit(e)}}>\r\n                    <label htmlFor=\"productSearch\">Search for vegan makeup by type, name or brand.</label>\r\n                    <Autosuggest \r\n                        suggestions={suggestions.slice(0, 5)}\r\n                        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                        getSuggestionValue={this.getSuggestionValue}\r\n                        onSuggestionSelected={this.onSuggestionSelected}\r\n                        renderSuggestion={this.renderSuggestion}\r\n                        inputProps={inputProps}\r\n                        focusInputOnSuggestionClick={false}\r\n                    />\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\n\r\nclass ProductText extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"productTextContainer\">\r\n        <div className=\"productText\">\r\n          <h2 className=\"visuallyHidden\">{this.props.product.name}</h2>\r\n          <p>Brand: {!this.props.product.brand ? \"Not Available\" : this.props.product.brand}</p>\r\n          <p>Price: {\r\n            this.props.product.price === \"0.0\" ? \"Not Available\" : parseInt(this.props.product.price).toFixed(2)\r\n          }</p>\r\n          <p>Rating: {!this.props.product.rating ? \"Not Rated\" : `${this.props.product.rating}/5`}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductText;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link, useRouteMatch } from 'react-router-dom';\r\nimport ProductText from './ProductText';\r\n\r\nconst ReviewLink = (props) => {\r\n  let match = useRouteMatch({\r\n    path: props.to,\r\n    exact: props.activateOnlyWhenExact\r\n  });\r\n\r\n  return(\r\n    <div className={match ? \"hide\" : \"\"}>\r\n      <Link className=\"reviewLink\" onClick={(e) => props.setActiveID(e, props.product.id)} to={props.to}>{props.label}</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass ProductImage extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"productImage\">\r\n        <Link to={`/products/${this.props.product.id}`}>\r\n          <img onClick={(e) => this.props.setActiveID(e, this.props.product.id)} src={this.props.product.api_featured_image} alt={this.props.product.name} />\r\n        </Link>\r\n        <ProductText product={this.props.product} />\r\n        {/* <Link className=\"reviewLink\" onClick={(e) => this.props.setActiveID(e, this.props.product.id)} to={`/products/${this.props.product.id}/review`}>Reviews</Link> */}\r\n        <ReviewLink activateOnlyWhenExact={true} setActiveID={this.props.setActiveID} product={this.props.product} to={`/products/${this.props.product.id}/review`} label=\"Reviews\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductImage;","// a couple of functions from the React library\r\nimport React, { Component } from 'react';\r\nimport firebase from 'firebase';\r\n\r\nclass ReviewSubmitButton extends Component{\r\n    constructor({ratingProps}){\r\n        super({ratingProps});\r\n        this.state = {\r\n            currentRating: ratingProps,\r\n            readReview: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // create a variable that holds a reference to  database\r\n        const dbRef = firebase.database().ref();\r\n    }\r\n\r\n    GoToReviewPanel = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            readReview: false,\r\n            GoToReviews: true\r\n        })\r\n    }\r\n    \r\n    \r\n    render() {\r\n        const dbRef = firebase.database().ref()\r\n        dbRef.on(\"value\", response => {\r\n        const dataFromDb = response.val();\r\n        // see the information and parse the way we want it.\r\n        // console.log(\"dataFromDb3\", dataFromDb);\r\n\r\n        const newState = [];\r\n\r\n        for (let key in dataFromDb) {\r\n            const reviewInfo = {\r\n            key: key,\r\n            review: dataFromDb[key]\r\n            };\r\n            newState.push(reviewInfo);\r\n\r\n            // this.setState({\r\n            //     currentRating:\r\n            // })\r\n            // console.log(\"reviewInfo(from button)\", reviewInfo);\r\n        }\r\n        // dbRef = firebase.database().ref().key(`${reviewInfo.key}`);\r\n        });\r\n\r\n            \r\n        return (\r\n            <button \r\n                className=\"submitButton\" \r\n                type=\"submit\" \r\n                onClick={()=>{dbRef.push({userRating: this.state.currentRating})}}>\r\n                Submit\r\n            </button>\r\n        );\r\n    }\r\n}\r\nexport default ReviewSubmitButton;","import React, { Component } from \"react\";\r\nimport ReviewSubmitButton from './ReviewSubmitButton';\r\n\r\n\r\n// star rating component from https://scotch.io/tutorials/build-a-star-rating-component-for-react\r\n\r\nclass StarRating extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        currentRating: this.props.currentRating\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setRating();\r\n\r\n    }\r\n\r\n    hoverHandler = ev => {\r\n        const stars = ev.target.parentElement.getElementsByClassName(\"star\");\r\n        const hoverValue = ev.target.dataset.value;\r\n        Array.from(stars).forEach(star => {\r\n        star.style.color = hoverValue >= star.dataset.value ? \"yellow\" : \"gray\";\r\n        });\r\n    };\r\n\r\n    setRating = ev => {\r\n        const stars = this.refs.rating.getElementsByClassName(\"star\");\r\n        Array.from(stars).forEach(star => {\r\n        star.style.color =\r\n            this.state.currentRating >= star.dataset.value ? \"yellow\" : \"gray\";\r\n        });\r\n    };\r\n\r\n    starClickHandler = ev => {\r\n        let rating = ev.target.dataset.value;\r\n        this.setState({ \r\n            currentRating: rating \r\n        }); // set state so the rating stays highlighted\r\n        if (this.props.onClick) {\r\n        this.props.onClick(rating); // emit the event up to the parent\r\n        }\r\n\r\n        console.log(rating)\r\n        // console.log('dbRef2',dbRef));\r\n    };\r\n    // const dbRef = firebase.database().ref();\r\n    // dbRef.push({\r\n    //     userRating: this.state.currentRating,\r\n    // })\r\n    \r\n    render() {\r\n        console.log(\"userRating\", this.state.currentRating);\r\n        return (\r\n        <div\r\n            className=\"rating\"\r\n            ref=\"rating\"\r\n            data-rating={this.state.currentRating}\r\n            onMouseOut={this.setRating}\r\n        >\r\n            {[...Array(+this.props.numberOfStars).keys()].map(n => {\r\n            return (\r\n                <span\r\n                className=\"star\"\r\n                key={n + 1}\r\n                data-value={n + 1}\r\n                value={n + 1}\r\n                onMouseOver={this.hoverHandler}\r\n                onClick={this.starClickHandler}\r\n                >\r\n                &#9733;\r\n                </span>\r\n            );\r\n            })}\r\n            <ReviewSubmitButton ratingProps={this.state.currentRating} />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StarRating;\r\n","// a couple of functions from the React library\r\nimport React from \"react\";\r\nimport StarRating from './StarRating';\r\n\r\n\r\nconst ReviewForm = props => (\r\n    <div className=\"reviewInput wrapper\">\r\n        <form className=\"reviewForm\" action=\"submit\" onSubmit={e => props.handleFormSubmit(e)}>\r\n\r\n            <label \r\n                className=\"visuallyHidden\" \r\n                htmlFor=\"userName\"\r\n                >\r\n                Please Enter Your Name!\r\n            </label>\r\n            <input\r\n                name=\"userName\"\r\n                placeholder= \"What is your name?\"\r\n                className=\"nameInputField\"\r\n                type=\"text\"\r\n                id=\"userName\"\r\n                onChange={props.handleChange}\r\n                value={props.userNameProp} // good for accessibility and screen readers, this will track the changes even if they leave and come back\r\n            />\r\n\r\n            <label \r\n                className=\"visuallyHidden\" \r\n                htmlFor=\"userReview\"\r\n                \r\n                >\r\n                Please Enter Your Name!\r\n            </label>\r\n            <textarea \r\n                id=\"userReview\" \r\n                name=\"userReview\"\r\n                rows=\"10\" \r\n                cols=\"80\" \r\n                placeholder=\"Your Review:\"\r\n                onChange={props.handleChangeTxtArea}\r\n                value={props.userReviewProp}\r\n                ></textarea>\r\n            <section className=\"radioSection\">\r\n            {/* radio input for purchase or won't repurchase. */}\r\n                <p>Would You Repurchase This Item?</p>\r\n                <div>\r\n                    <div className=\"yesInput\">\r\n                        <input \r\n                            type=\"radio\" \r\n                            id=\"Yes\" \r\n                            value=\"yes\"\r\n                            name=\"reviewForm\"\r\n                            onChange={props.radioChange}\r\n                            />\r\n                        <label htmlFor=\"Yes\">Yes</label>\r\n                    </div>\r\n\r\n                    <div className=\"noInput\">\r\n                        <input\r\n                            type=\"radio\" \r\n                            id=\"No\" \r\n                            value=\"no\"\r\n                            name=\"reviewForm\"\r\n                            onChange={props.radioChange}\r\n                            />\r\n                        <label htmlFor=\"No\">No</label>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            \r\n            <section className=\"userStarRating\">\r\n                <span className=\"userSpan\">How Would You Rate This Product:</span>\r\n                <div className=\"starsOnly\">\r\n                    <StarRating\r\n                        numberOfStars=\"5\"\r\n                        currentRating=\"0\"\r\n                        onClick={props.setRating}\r\n                        />\r\n                </div>\r\n            </section>\r\n        </form>\r\n    </div>\r\n);\r\n\r\nexport default ReviewForm;\r\n","// a couple of functions from the React library\r\nimport React from \"react\";\r\n\r\nconst ReviewReadPanel = (review) => {\r\n    return (\r\n        <div className=\"reviewPanel\" key={review.uniqueKey}>\r\n            <p>\r\n            <span className=\"userSpan\">{review.userName}</span>\r\n            {review.userReview}\r\n            <span className=\"userSpan\">Would you buy this again:</span>\r\n            {review.userRepurchase}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReviewReadPanel;\r\n","// a couple of functions from the React library\r\nimport React, { Component, Fragment } from \"react\";\r\nimport ReviewForm from \"./ReviewForm\";\r\nimport firebase from \"./../firebase\";\r\nimport ReviewReadPanel from \"./ReviewReadPanel\";\r\n\r\n\r\nclass ReviewParent extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        reviews: [],\r\n        userImg: \"\", //need to figure out how to keep an image url in the database. and find image storage\r\n        userName: \"\",\r\n        userReview: \"\",\r\n        userID: \"\",\r\n        userRepurchase: '',\r\n        uniqueKey: '',\r\n        isReviewing: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // error handling for guest / anonymous users\r\n        if (this.props.user) {\r\n            this.setState({\r\n                userID: this.props.user.uid\r\n            })\r\n        } else {\r\n            this.setState({\r\n                userID: '00000'\r\n            })\r\n        }\r\n\r\n        // create a variable that holds a reference to  database\r\n        const dbRef = firebase.database().ref(`products/${this.props.activeID}/`);\r\n    \r\n        // 🧠 event listener that takes a callback function used to get data from the database and call it response.\r\n        dbRef.on(\"value\", response => {\r\n            const dataFromDb = response.val();\r\n            const newState = [];\r\n            for (let key in dataFromDb) {\r\n                newState.push(dataFromDb[key])\r\n            }\r\n            // see the information and parse the way we want it.\r\n            // call this.setState to update the component state using the local array newState.\r\n            this.setState({\r\n                    reviews: newState\r\n            }, () => {console.log(this.state.reviews)});\r\n        }\r\n        )}\r\n\r\n    // 🧮 function to handle inputs for review form:\r\n    handleChange = e => {\r\n        this.setState({\r\n        userName: e.target.value\r\n        })\r\n    };\r\n\r\n    handleChangeTxtArea = e => {\r\n        this.setState({\r\n        userReview: e.target.value\r\n        })\r\n    };\r\n\r\n    radioChange = (changeEvent) => {\r\n        this.setState({\r\n            userRepurchase: changeEvent.target.value\r\n        });\r\n    }\r\n\r\n    // 🧠 on submit, push user input into firebase\r\n    handleFormSubmit = e => {\r\n        e.preventDefault();\r\n        const dbRef = firebase.database().ref(`products/${this.props.activeID}/`);\r\n        const dbRefUser = firebase.database().ref(`users/${this.state.uID}/`);\r\n        dbRef.push({\r\n            userName: this.state.userName,\r\n            userReview: this.state.userReview,\r\n            userRepurchase: this.state.userRepurchase,\r\n            userID: \"00000\",\r\n            uniqueKey: this.state.uniqueKey\r\n        })\r\n        // console.log('dbRef',dbRef));\r\n\r\n        // return input to empty.\r\n        // eslint-disable-next-line\r\n        this.setState({\r\n            userName: \"\",\r\n            userReview: \"\",\r\n            userRepurchase: ''\r\n        }\r\n        )\r\n    };\r\n\r\n    setRead = () => {\r\n        if(this.props.isWriting) {\r\n            this.props.toggleReadReview();\r\n        }\r\n    }\r\n\r\n    setWrite = () => {\r\n        if(!this.props.isWriting) {\r\n            this.props.toggleReadReview();\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <Fragment>\r\n                <div className=\"reviewButtons\">\r\n                    <button onClick={this.setWrite}>write review</button>\r\n                    <button onClick={this.setRead}>reviews</button>\r\n                </div>\r\n                <div className={`mainGrid wrapper ${!this.props.isWriting && \"scrollOn\"}`} >\r\n                    {!this.props.isWriting ? \r\n                    <div className=\"reviews\">\r\n                        { this.state.reviews.length !== 0\r\n                            ?\r\n                            this.state.reviews.map(reviewList => {\r\n                                return <ReviewReadPanel review={reviewList}/>\r\n                            })\r\n                            :\r\n                            <p>Oops, no reviews exist of this product yet! Why not leave your own review if you've tried this product before?</p>\r\n                        }\r\n                    </div> : \r\n                    <ReviewForm\r\n                        handleFormSubmit={this.handleFormSubmit}\r\n                        handleChangeTxtArea={this.handleChangeTxtArea}\r\n                        handleChange={this.handleChange}\r\n                        radioChange={this.radioChange}\r\n                        userInputProp={this.state.userInput}\r\n                        userReviewProp={this.state.userReview}\r\n                        userStarProp={this.onStarClick}\r\n                    />\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ReviewParent;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport ReviewParent from './ReviewParent';\r\n\r\nclass ProductInfo extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      maxLength: 250\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n      <div className=\"productInfo\">\r\n        <h2>{this.props.product.name}</h2>\r\n        <p>{this.props.product.description.length > this.state.maxLength ?\r\n          <Fragment>\r\n            {`${this.props.product.description.substring(0, this.state.maxLength)}... `}\r\n            <span className=\"infoLink\"><a href={this.props.product.product_link} target=\"_blank\">Product Page</a></span>\r\n          </Fragment>\r\n          : <Fragment>\r\n            {this.props.product.description}\r\n            <span className=\"infoLink\"><a href={this.props.product.product_link} target=\"_blank\">Product Page</a></span>\r\n          </Fragment>}</p>\r\n        <h3>Colors:</h3>\r\n        <div className=\"productColors\">\r\n          {this.props.product.product_colors.length === 0 ? <p>No colors available.</p> :\r\n            this.props.product.product_colors.map((color) => {\r\n              return (\r\n                <span key={color.colour_name} aria-label={color.colour_name} style={{ background: color.hex_value }} title={color.colour_name}></span>\r\n              )\r\n            })}\r\n        </div>\r\n      </div>\r\n      <Route path=\"/products/:productID/review\" exact render={() => <ReviewParent user={this.props.user} activeID={this.props.activeID} isWriting={this.props.isWriting} toggleReadReview={this.props.toggleReadReview} />} />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductInfo;","import React, { Component, Fragment } from 'react';\r\nimport ProductImage from './ProductImage';\r\nimport ProductInfo from './ProductInfo';\r\n\r\nclass ResultItem extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    // max length for product description\r\n    this.state = {\r\n      isWriting: false\r\n    }\r\n  }\r\n\r\n  toggleReadReview = () => {\r\n    this.setState({isWriting: !this.state.isWriting});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className={`result ${this.props.activeID === this.props.product.id && \"selected\"}`} key={this.props.product.id}>\r\n          <ProductImage product={this.props.product} setActiveID={this.props.setActiveID}/>\r\n          {this.props.activeID === this.props.product.id && <ProductInfo isWriting={this.state.isWriting} toggleReadReview={this.toggleReadReview} product={this.props.product} activeID={this.props.activeID}/>}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResultItem;","import React, { Component } from 'react';\r\nimport ResultItem from './ResultItem';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\nclass Results extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      activeID: null\r\n    }\r\n  }\r\n\r\n  setActiveID = (e, id) => {\r\n    this.setState({activeID: id});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"results\">\r\n        {this.props.filteredResults.map(product => {\r\n          return (\r\n            <ResultItem key={product.id} setActiveID={this.setActiveID} activeID={this.state.activeID} product={product} user={this.props.user}/>\r\n          );\r\n        })}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\r\n\r\n\r\nclass FilterResults extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            refineArray: [],\r\n        }\r\n    }\r\n    // function gets triggered onChange of the checkbox and added to the state or remove when unchecked\r\n    filterSelection = (e) => {\r\n        const set = new Set(this.state.refineArray);\r\n        e.target.checked ? set.add(e.target.name) : set.delete(e.target.name);\r\n        this.setState({ refineArray: [...set] }, this.updateRefinedItemsMain);\r\n\r\n    }\r\n    // Function to pass on the props to the Main component\r\n    updateRefinedItemsMain = (e) => {\r\n        this.props.updaterefinedItems(e, this.state.refineArray)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='filterOptions'>\r\n                <h4>Filter results</h4>\r\n                <div className='filterContainer'>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"Canadian\" name='Canadian' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"Canadian\"> Canadian</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"CertClean\" name='CertClean' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"CertClean\"> Cert Clean</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"chemicalFree\" name='Chemical Free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"chemicalFree\"> Chemical Free</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"dairyFree\" name='Dairy Free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"dairyFree\"> Dairy Free</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"ewgVerified\" name='EWG Verified' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"ewgVerified\"> EWG Verified</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"ecoCert\" name='EcoCert' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"ecoCert\"> Eco Cert</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"fairTrade\" name='Fair Trade' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"fairTrade\"> Fair Trade</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"glutenFree\" name='Gluten Free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"glutenFree\"> Gluten Free</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"hypoallergenic\" name='Hypoallergenic' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"hypoallergenic\"> Hypoallergenic</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"natural\" name='Natural' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"natural\"> Natural</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"nonGmo\" name='Non-GMO' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"nonGmo\"> Non-GMO</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"organic\" name='Organic' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"organic\"> Organic</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"peanutFreeProduct\" name='Peanut Free Product' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"peanutFreeProduct\"> Peanut Free Product</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"sugarFree\" name='Sugar Free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"sugarFree\"> Sugar Free</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"usdaOrganic\" name='USDA Organic' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"usdaOrganic\"> USDA Organic</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"alcoholFree\" name='alcohol free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"alcoholFree\"> Alcohol Free</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"oilFree\" name='oil free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"oilFree\"> Oil Free</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"waterFree\" name='water free' onChange={this.filterSelection} />\r\n                        <label htmlFor=\"waterFree\"> Water Free</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterResults ","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Results from './Results';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport FilterResults from './FilterResults';\r\n\r\nclass Main extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            isSearched: false,\r\n            searchInput: '',\r\n            filteredResults: [],\r\n            originalResults: []\r\n        }\r\n    }\r\n\r\n    handleSearchInput = (input) => {\r\n        this.setState({\r\n            searchInput: input,\r\n            isSearched: true\r\n        }, this.filterResults)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.veganProducts)\r\n    }\r\n\r\n    filterResults = () => {\r\n        const filteredArray = this.props.veganProducts.filter(product => {\r\n            return product.product_type === this.state.searchInput || product.name === this.state.searchInput || product.brand === this.state.searchInput;\r\n        });\r\n        this.setState({\r\n            filteredResults: filteredArray,\r\n            originalResults: filteredArray\r\n        });\r\n    }\r\n\r\n    //When any choice from the from filtering gets checked it triggers the function and pass on the props to as an arguments and populate the array by checking if something from filter selection gets clicked populate filteredResult array with new array else show the original array.\r\n    newResults = (e, refinedCategory) => {\r\n        let filterRefinedArray = [];\r\n        if (refinedCategory.length !== 0) {\r\n            this.state.originalResults.map((eachProduct) => {\r\n                return eachProduct.tag_list.forEach((eachTag) => {\r\n                    refinedCategory.forEach((choice) => {\r\n                        if (choice === eachTag) {\r\n                            if (!filterRefinedArray.includes(eachProduct)){\r\n                                filterRefinedArray.push(eachProduct)\r\n                            }\r\n                        };\r\n                    })\r\n                })\r\n            })\r\n            this.setState({\r\n                filteredResults: filterRefinedArray\r\n            })\r\n        } else {\r\n            this.setState({\r\n                filteredResults: this.state.originalResults\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"wrapper\">\r\n                <Search veganProducts={this.props.veganProducts} handleSearchInput={this.handleSearchInput} />\r\n                <FilterResults updaterefinedItems={this.newResults} />\r\n                {this.state.isSearched ? <Results filteredResults={this.state.filteredResults} /> : null}\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"wrapper\">\r\n                <p>&copy; 2020 <a href=\"http://xyoung.ca/\" target=\"_blank\" rel=\"noopener noreferrer\">Sui Young</a>, <a href=\"http://naveenmalhotra.ca/\" target=\"_blank\" rel=\"noopener noreferrer\">Naveen Malhotra</a>, <a href=\"https://github.com/joemano\" target=\"_blank\" rel=\"noopener noreferrer\">Jobert Manosca</a>, <a href=\"https://stephaniekerr.io\" target=\"_blank\" rel=\"noopener noreferrer\">Stephanie Kerr</a></p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","// a couple of functions from the React library\r\nimport React, { Component } from \"react\";\r\n//import firebase\r\nimport firebase, { auth, provider } from './firebase';\r\n// import components\r\nimport Helmet from './Components/Helmet.js';\r\nimport Preloader from './Components/Preloader';\r\nimport Header from './Components/Header';\r\nimport Main from './Components/Main';\r\nimport Footer from './Components/Footer';\r\n// import axios\r\nimport axios from 'axios';\r\n// import react-router\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n// CSS for the `App` component\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      //set initial state for api data\r\n      veganArray: [],\r\n      //set initial state for preloader\r\n      isLoading: true,\r\n      //set initial state for user login (auth details and historical)\r\n      user: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //api call for data, stored in state veganArray\r\n    //state isLoading set to false to unmount preloader and mount webpage components\r\n    axios({\r\n      url: 'https://makeup-api.herokuapp.com/api/v1/products.json',\r\n      method: 'GET',\r\n      responseType: 'json',\r\n      params: {\r\n        product_tags: 'vegan',\r\n      }\r\n    }).then((response) => {\r\n      this.setState({\r\n        veganArray: response.data,\r\n        isLoading: false,\r\n      })\r\n    })\r\n    //authetication history checked for user to allow persisted login status which triggers loggedin components\r\n    auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.setState({ user });\r\n      }\r\n    })\r\n  }\r\n\r\n  //this function initializes the popup from google to sign in and sets the user state to user's details\r\n  login = () => {\r\n    auth.signInWithPopup(provider) \r\n      .then((result) => {\r\n        this.setState({\r\n          user: result.user\r\n        });\r\n      });\r\n  }\r\n\r\n  //this function initializes sign out and sets the user state back to null, returning enduser to guest/anonymous view components\r\n  logout = () => {\r\n    auth.signOut()\r\n      .then(() => {\r\n        this.setState({\r\n          user: null\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        {/* helmet allows for injected title, meta tags */}\r\n        <Helmet />\r\n        {/* determine component view based on isLoading state */}\r\n        {\r\n          this.state.isLoading\r\n            ?\r\n            <Preloader />\r\n            :\r\n            <div className=\"outerWrapper\">\r\n              <Header\r\n                login={this.login}\r\n                logout={this.logout}\r\n                user={auth.currentUser} />\r\n              <Main\r\n                veganProducts={this.state.veganArray}\r\n                user={auth.currentUser} />\r\n              <Footer />\r\n            </div>\r\n        }\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}